/*

INSERT - 
(
  bucket_id = 'Uploads'::text
  AND auth.role() = 'authenticated'::text
)


UPDATE - 
(
  bucket_id = 'Uploads'::text
  AND (auth.role() = 'authenticated'::text)
)

DELETE - 
(
  bucket_id = 'Uploads'::text
  AND auth.role() = 'authenticated'::text
)

GET - 
(
  bucket_id = 'Uploads'::text
  AND auth.role() = 'authenticated'::text
)


*/

// interfaces/user.ts
export interface User {
    firstName: string;
    lastName: string;
    email: string;
    // Add more fields as needed
  }

  // pages/profile.tsx
import { GetServerSideProps } from 'next';
import { User } from '../interfaces/user';

interface ProfileProps {
  user: User;
}

const ProfilePage: React.FC<ProfileProps> = ({ user }) => {
  return (
    <div>
      <h1>User Profile</h1>
      <form>
        <label htmlFor="firstName">First Name:</label>
        <input type="text" id="firstName" value={user.firstName} readOnly />

        <label htmlFor="lastName">Last Name:</label>
        <input type="text" id="lastName" value={user.lastName} readOnly />

        <label htmlFor="email">Email:</label>
        <input type="email" id="email" value={user.email} readOnly />
      </form>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async () => {
  // Fetch data from an API
  const response = await fetch('https://api.example.com/user');
  const user: User = await response.json();

  return {
    props: {
      user,
    },
  };
};

export default ProfilePage;

// components/UserProfile.tsx
import { useEffect, useState } from 'react';
import { User } from '../interfaces/user';

const UserProfile: React.FC = () => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState<boolean>(true);

  useEffect(() => {
    const fetchUserData = async () => {
      try {
        const response = await fetch('https://api.example.com/user');
        const data: User = await response.json();
        setUser(data);
      } catch (error) {
        console.error('Error fetching user data:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchUserData();
  }, []);

  if (loading) return <p>Loading...</p>;

  return (
    <div>
      <h1>User Profile</h1>
      <form>
        <label htmlFor="firstName">First Name:</label>
        <input type="text" id="firstName" value={user?.firstName || ''} readOnly />

        <label htmlFor="lastName">Last Name:</label>
        <input type="text" id="lastName" value={user?.lastName || ''} readOnly />

        <label htmlFor="email">Email:</label>
        <input type="email" id="email" value={user?.email || ''} readOnly />
      </form>
    </div>
  );
};

export default UserProfile;
